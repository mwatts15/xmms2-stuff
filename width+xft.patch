diff dmenu-4.5/config.mk dmenu/config.mk
14a15,18
> # Xft, comment if you don't want it
> XFTINC = -I/usr/include/freetype2
> XFTLIBS  = -lXft -lXrender -lfreetype -lz -lfontconfig
> 
16,17c20,21
< INCS = -I${X11INC}
< LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS}
---
> INCS = -I${X11INC} ${XFTINC}
> LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${XFTLIBS}
23c27
< LDFLAGS  = -s ${LIBS}
---
> LDFLAGS  = ${LIBS}
Only in dmenu: config.mk.orig
diff dmenu-4.5/dmenu.1 dmenu/dmenu.1
56c56
< defines the font or font set used.
---
> defines the font or font set used. eg. "fixed" or "Monospace-12:normal" (an xft font)
Only in dmenu: dmenu.1.orig
diff dmenu-4.5/dmenu.c dmenu/dmenu.c
19a20
> #define DEFFONT "fixed" /* xft example: "Monospace-11" */
28a30
> static void cleanup(void);
43a46
> static int mwperc = 100;
53,54c56,57
< static unsigned long normcol[ColLast];
< static unsigned long selcol[ColLast];
---
> static ColorSet *normcol;
> static ColorSet *selcol;
56a60,61
> static Bool running = True;
> static int ret = 0;
92a98,105
> 		else if(!strcmp(argv[i], "-w"))  /* menu width */
>         {
>             const char *n = argv[++i];
>             if (n[strlen(n) - 1] == '%')
>                 mwperc = atoi(n);
>             else
>                 mw = atoi(n);
>         }
107c120,122
< 	initfont(dc, font);
---
> 	initfont(dc, font ? font : DEFFONT);
> 	normcol = initcolor(dc, normfgcolor, normbgcolor);
> 	selcol = initcolor(dc, selfgcolor, selbgcolor);
120c135,136
< 	return 1; /* unreachable */
---
> 	cleanup();
> 	return ret;
162a179,187
> cleanup(void) {
>     freecol(dc, normcol);
>     freecol(dc, selcol);
>     XDestroyWindow(dc->dpy, win);
>     XUngrabKeyboard(dc->dpy, CurrentTime);
>     freedc(dc);
> }
> 
> void
170c195
< 	drawrect(dc, 0, 0, mw, mh, True, BG(dc, normcol));
---
> 	drawrect(dc, 0, 0, mw, mh, True, normcol->BG);
181c206
< 		drawrect(dc, curpos, 2, 1, dc->h - 4, True, FG(dc, normcol));
---
> 		drawrect(dc, curpos, 2, 1, dc->h - 4, True, normcol->FG);
184a210
>         dc->x = 0;
324c350,351
< 		exit(EXIT_FAILURE);
---
>         ret = EXIT_FAILURE;
>         running = False;
362c389,390
< 		exit(EXIT_SUCCESS);
---
> 		ret = EXIT_SUCCESS;
> 		running = False;
493c521
< 	while(!XNextEvent(dc->dpy, &ev)) {
---
> 	while(running && !XNextEvent(dc->dpy, &ev)) {
527,531d554
< 	normcol[ColBG] = getcolor(dc, normbgcolor);
< 	normcol[ColFG] = getcolor(dc, normfgcolor);
< 	selcol[ColBG]  = getcolor(dc, selbgcolor);
< 	selcol[ColFG]  = getcolor(dc, selfgcolor);
< 
569c592,593
< 		mw = info[i].width;
---
> 		mw = mw ? mw : info[i].width * ((double)mwperc / 100);
>         /*fprintf(stderr, "mw = %d\n", mw);*/
585c609
< 	swa.background_pixel = normcol[ColBG];
---
> 	swa.background_pixel = normcol->BG;
Only in dmenu: dmenu.c.orig
diff dmenu-4.5/draw.c dmenu/draw.c
12,14d11
< #define DEFAULTFN  "fixed"
< 
< static Bool loadfont(DC *dc, const char *fontstr);
26c23
< drawtext(DC *dc, const char *text, unsigned long col[ColLast]) {
---
> drawtext(DC *dc, const char *text, ColorSet *col) {
38c35
< 	drawrect(dc, 0, 0, dc->w, dc->h, True, BG(dc, col));
---
> 	drawrect(dc, 0, 0, dc->w, dc->h, True, col->BG);
43c40
< drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]) {
---
> drawtextn(DC *dc, const char *text, size_t n, ColorSet *col) {
47,48c44,50
< 	XSetForeground(dc->dpy, dc->gc, FG(dc, col));
< 	if(dc->font.set)
---
> 	XSetForeground(dc->dpy, dc->gc, col->FG);
> 	if(dc->font.xft_font) {
> 		if (!dc->xftdraw)
> 			eprintf("error, xft drawable does not exist");
> 		XftDrawStringUtf8(dc->xftdraw, &col->FG_xft,
> 			dc->font.xft_font, x, y, (unsigned char*)text, n);
> 	} else if(dc->font.set) {
50c52
< 	else {
---
> 	} else {
71a74,83
> freecol(DC *dc, ColorSet *col) {
>     if(col) {
>         if(&col->FG_xft)
>             XftColorFree(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
>                 DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), &col->FG_xft);
>         free(col); 
>     }
> }
> 
> void
72a85,88
>     if(dc->font.xft_font) {
>         XftFontClose(dc->dpy, dc->font.xft_font);
>         XftDrawDestroy(dc->xftdraw);
>     }
75c91
< 	if(dc->font.xfont)
---
>     if(dc->font.xfont)
77c93
< 	if(dc->canvas)
---
>     if(dc->canvas)
79,81c95,100
< 	XFreeGC(dc->dpy, dc->gc);
< 	XCloseDisplay(dc->dpy);
< 	free(dc);
---
> 	if(dc->gc)
>         XFreeGC(dc->dpy, dc->gc);
> 	if(dc->dpy)
>         XCloseDisplay(dc->dpy);
> 	if(dc)
>         free(dc);
93a113,126
> ColorSet *
> initcolor(DC *dc, const char * foreground, const char * background) {
> 	ColorSet * col = (ColorSet *)malloc(sizeof(ColorSet));
> 	if(!col)
> 		eprintf("error, cannot allocate memory for color set");
> 	col->BG = getcolor(dc, background);
> 	col->FG = getcolor(dc, foreground);
> 	if(dc->font.xft_font)
> 		if(!XftColorAllocName(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
> 			DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), foreground, &col->FG_xft))
> 			eprintf("error, cannot allocate xft font color '%s'\n", foreground);
> 	return col;
> }
> 
112,122d144
< 	if(!loadfont(dc, fontstr ? fontstr : DEFAULTFN)) {
< 		if(fontstr != NULL)
< 			fprintf(stderr, "cannot load font '%s'\n", fontstr);
< 		if(fontstr == NULL || !loadfont(dc, DEFAULTFN))
< 			eprintf("cannot load font '%s'\n", DEFAULTFN);
< 	}
< 	dc->font.height = dc->font.ascent + dc->font.descent;
< }
< 
< Bool
< loadfont(DC *dc, const char *fontstr) {
127,129c149,154
< 	if(!*fontstr)
< 		return False;
< 	if((dc->font.set = XCreateFontSet(dc->dpy, fontstr, &missing, &n, &def))) {
---
> 	missing = NULL;
> 	if((dc->font.xfont = XLoadQueryFont(dc->dpy, fontstr))) {
> 		dc->font.ascent = dc->font.xfont->ascent;
> 		dc->font.descent = dc->font.xfont->descent;
> 		dc->font.width   = dc->font.xfont->max_bounds.width;
> 	} else if((dc->font.set = XCreateFontSet(dc->dpy, fontstr, &missing, &n, &def))) {
136,140c161,166
< 	}
< 	else if((dc->font.xfont = XLoadQueryFont(dc->dpy, fontstr))) {
< 		dc->font.ascent  = dc->font.xfont->ascent;
< 		dc->font.descent = dc->font.xfont->descent;
< 		dc->font.width   = dc->font.xfont->max_bounds.width;
---
> 	} else if((dc->font.xft_font = XftFontOpenName(dc->dpy, DefaultScreen(dc->dpy), fontstr))) {
> 		dc->font.ascent = dc->font.xft_font->ascent;
> 		dc->font.descent = dc->font.xft_font->descent;
> 		dc->font.width = dc->font.xft_font->max_advance_width;
> 	} else {
> 		eprintf("cannot load font '%s'\n", fontstr);
144c170,171
< 	return dc->font.set || dc->font.xfont;
---
> 	dc->font.height = dc->font.ascent + dc->font.descent;
> 	return;
153a181
> 	int screen = DefaultScreen(dc->dpy);
160c188,193
< 	                           DefaultDepth(dc->dpy, DefaultScreen(dc->dpy)));
---
> 	                           DefaultDepth(dc->dpy, screen));
> 	if(dc->font.xft_font && !(dc->xftdraw)) {
> 		dc->xftdraw = XftDrawCreate(dc->dpy, dc->canvas, DefaultVisual(dc->dpy,screen), DefaultColormap(dc->dpy,screen));
> 		if(!(dc->xftdraw))
> 			eprintf("error, cannot create xft drawable\n");
> 	}
165c198,202
< 	if(dc->font.set) {
---
> 	if(dc->font.xft_font) {
> 		XGlyphInfo gi;
> 		XftTextExtentsUtf8(dc->dpy, dc->font.xft_font, (const FcChar8*)text, len, &gi);
> 		return gi.width;
> 	} else if(dc->font.set) {
167d203
< 
Only in dmenu: draw.c.orig
diff dmenu-4.5/draw.h dmenu/draw.h
3,6c3
< #define FG(dc, col)  ((col)[(dc)->invert ? ColBG : ColFG])
< #define BG(dc, col)  ((col)[(dc)->invert ? ColFG : ColBG])
< 
< enum { ColBG, ColFG, ColBorder, ColLast };
---
> #include <X11/Xft/Xft.h>
13a11
> 	XftDraw *xftdraw;
20a19
> 		XftFont *xft_font;
23a23,28
> typedef struct {
> 	unsigned long FG;
> 	XftColor FG_xft;
> 	unsigned long BG;
> } ColorSet;
> 
25,26c30,32
< void drawtext(DC *dc, const char *text, unsigned long col[ColLast]);
< void drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]);
---
> void drawtext(DC *dc, const char *text, ColorSet *col);
> void drawtextn(DC *dc, const char *text, size_t n, ColorSet *col);
> void freecol(DC *dc, ColorSet *col);
29a36
> ColorSet *initcolor(DC *dc, const char *foreground, const char *background);
Only in dmenu: draw.h.orig
Only in dmenu: .git
Only in dmenu: .gitignore
Only in dmenu: menu
Only in dmenu: tags
